admin.js-----
openAdminThread(code);
}

// initial render calls
renderAdmin();
renderAdminInbox();

donor.js-----
// js/donor.js
// Keys
const LS_ROLE = 'wishjar_role';
const LS_ACTIVE_USER = 'wishjar_active_user';
const LS_WISHES = 'wishjar_wishes';
const LS_DONATIONS = 'wishjar_donations';
const LS_MESSAGES = 'wishjar_messages';
const LS_LATEST_CODE = 'wishjar_latest_code';
const LS_THANKS = 'wishjar_thankyou';

import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

// ---------- CONFIG ----------
const SUPABASE_URL = "https://eaivuhgvzdvvxscqqqji.supabase.co"; // replace
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVhaXZ1aGd2emR2dnhzY3FxcWppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1OTMxNDIsImV4cCI6MjA3MTE2OTE0Mn0.ru1S0ZiYQluFFzYkrbFxqzk2v315xAA29iXlviy3Y1E";                          // replace
// ----------------------------

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);


// Demo defaults (copied from original full.html)
const defaultWishes = [
  { id:'w1', nickname:'Star Panda',    situation:'Lives with single parent.', wish:'Black school shoes (size 38)', category:'shoes', emotion:'hope', granted:false, batch:'2025-08' },
  { id:'w2', nickname:'Blue Sparrow',  situation:'Shares study space with siblings.', wish:'Desk lamp + A4 books', category:'stationery', emotion:'determination', granted:false, batch:'2025-08' },
  { id:'w3', nickname:'Kind Tiger',    situation:'Long commute; limited lunch.', wish:'Meal allowance (RM60)', category:'meals', emotion:'sadness', granted:false, batch:'2025-08' },
  { id:'w4', nickname:'Bright Mango',  situation:'Exam prep; needs calculator.', wish:'Scientific calculator', category:'stationery', emotion:'determination', granted:false, batch:'2025-08' },
  { id:'w5', nickname:'Quiet Horizon', situation:'Shoes torn; uniform fading.', wish:'School uniform (size M)', category:'other', emotion:'embarrassment', granted:false, batch:'2025-08' },
  { id:'w6', nickname:'Silver Fern',   situation:'Limited data at home.', wish:'Data top-up (RM30)', category:'data', emotion:'anxiety', granted:false, batch:'2025-09' },
  { id:'w7', nickname:'Sunny Lychee',  situation:'Old bicycle to school.', wish:'Bicycle repair', category:'transport', emotion:'determination', granted:false, batch:'2025-09' },
  { id:'w8', nickname:'Jade River',    situation:'Spotty internet access.', wish:'Data top-up (RM30)', category:'data', emotion:'anxiety', granted:false, batch:'2025-09' },
  { id:'w9', nickname:'Coral Leaf',    situation:'Late-night studying.', wish:'Clip-on reading lamp', category:'stationery', emotion:'hope', granted:false, batch:'2025-09' },
  { id:'w10', nickname:'Ruby Dawn',    situation:'Flat tire risk.', wish:'Bike tube + mini pump', category:'transport', emotion:'anxiety', granted:false, batch:'2025-09' }
];
const EMOTION_COLORS = { hope:'#60A5FA', determination:'#34D399', sadness:'#A78BFA', embarrassment:'#F472B6', anxiety:'#FCA5A5' };
const CATEGORY_ICON = { shoes:'👟', stationery:'✏️', meals:'🧃', data:'📶', transport:'🚲', other:'🎒' };

// Ensure role present: redirect if not logged in
if (!localStorage.getItem(LS_ROLE)) {
  alert('Please sign in (demo). Redirecting to login.');
  window.location.href = 'index.html';
}

// Utilities
async function loadWishes() {
  let { data, error } = await supabase.from('wishes').select('*');
  if (error) {
    console.error("Error loading wishes:", error);
    return [];
  }
  return data || []; // ensures it's always an array
}

async function saveWishes(wishes) {
  for (const w of wishes) {
    await supabase.from('wishes').upsert(w);
  }
}

// DONATIONS
async function loadDonations() {
  const { data, error } = await supabase.from('donations').select('*');
  if (error) { console.error(error); return []; }
  return data;
}
async function saveDonation(donation) {
  const { error } = await supabase.from('donations').insert([donation]);
  if (error) console.error(error);
}

// MESSAGES
async function loadMessages() {
  const { data, error } = await supabase.from('messages').select('*');
  if (error) { console.error(error); return []; }
  return data;
}
async function saveMessage(thread) {
  const { error } = await supabase.from('messages').upsert(thread);
  if (error) console.error(error);
}

// LATEST CODE
async function setLatestCode(code) {
  const { error } = await supabase.from('latest_code').upsert({ id:1, code });
  if (error) console.error(error);
}
async function getLatestCode() {
  const { data, error } = await supabase
  .from('latest_code')
  .select('code')
  .eq('id', 1)
  .maybeSingle();  // ✅ won't throw 406 if no row
  if (error) return null;
  return data?.code;
}

// THANKS
async function loadThanks() {
  const { data, error } = await supabase.from('thanks').select('*');
  if (error) { console.error(error); return {}; }
  const map = {};
  data.forEach(row => { map[row.code] = row; });
  return map;
}
async function saveThanks(obj) {
  const { error } = await supabase.from('thanks').upsert(obj);
  if (error) console.error(error);
}

// Router (pages are sections with IDs)
const navlinks = document.querySelectorAll('.navlink');
const pages = {
  home: document.getElementById('page-home'),
  about: document.getElementById('page-about'),
  achievements: document.getElementById('page-achievements'),
  status: document.getElementById('page-status'),
  donate: document.getElementById('page-donate'),
  inbox: document.getElementById('page-inbox')
};
function routeTo(name){
  Object.values(pages).forEach(p => p.classList.remove('active'));
  if (pages[name]) pages[name].classList.add('active');
  navlinks.forEach(n=>{
    if (n.dataset.route === name) n.classList.add('bg-white/20','font-semibold');
    else n.classList.remove('bg-white/20','font-semibold');
  });
  if (name === 'home') renderJar();
  if (name === 'inbox') renderInbox();
  if (name === 'achievements') renderAchievements();
  window.scrollTo({ top: 0, behavior: 'smooth' });
}
navlinks.forEach(btn => btn.addEventListener('click', ()=> routeTo(btn.dataset.route)));

// Logout
document.getElementById('logoutBtn').addEventListener('click', ()=>{
  try { localStorage.removeItem(LS_ROLE); localStorage.removeItem(LS_ACTIVE_USER); } catch(e){}
  window.location.href = 'index.html';
});

// Jar rendering
const ballsGroup = document.getElementById('ballsGroup');
const iconsLayer = document.getElementById('iconsLayer');

async function renderJar() {
  const circles = ballsGroup.querySelectorAll('circle[data-id]');
  const wishes = await loadWishes();   // ⬅️ FIXED
  const map = Object.fromEntries(wishes.map(w => [w.id, w]));
  const icons = [];

  circles.forEach(c => {
    const id = c.dataset.id;
    const w = map[id];
    if (w) {
      c.style.display = '';
      c.setAttribute('fill', EMOTION_COLORS[w.emotion] || '#FDE047');
      c.style.opacity = w.granted ? '1' : '.85';
      c.style.filter = w.granted ? 'drop-shadow(0 0 12px rgba(255,255,255,0.95))' : 'none';
      c.style.stroke = w.granted ? 'rgba(255,255,255,0.95)' : 'none';
      c.style.strokeWidth = w.granted ? '3' : '0';
      const cx = +c.getAttribute('cx'), cy = +c.getAttribute('cy');
      icons.push(
        `<text x="${cx}" y="${cy}" fill="#fff" text-anchor="middle" dominant-baseline="central" font-weight="700" font-size="12">${CATEGORY_ICON[w.category] || '🎒'}</text>`
      );
    } else {
      c.style.display = 'none';
    }
  });

  iconsLayer.innerHTML = icons.join('');
  await refreshBallHighlights();
}


// Modal open/close
const modal = document.getElementById('wishModal');
const modalBackdrop = document.getElementById('modalBackdrop');
const closeModalBtn = document.getElementById('closeModal');
const closeModalTop = document.getElementById('closeModalTop');
const grantBtn = document.getElementById('grantBtn');
const wishNickname = document.getElementById('wishNickname');
const wishEmotion = document.getElementById('wishEmotion');
const wishSituation = document.getElementById('wishSituation');
const wishText = document.getElementById('wishText');

let currentWishId = null;
function openModal(wishId){
  const w = loadWishes().find(x=>x.id===wishId);
  if(!w) return;
  currentWishId = wishId;
  wishNickname.textContent = w.nickname || 'Student';
  wishEmotion.textContent = w.emotion ? (w.emotion[0].toUpperCase()+w.emotion.slice(1)) : '-';
  wishSituation.textContent = w.situation || '';
  wishText.textContent = w.wish || '';
  modal.classList.remove('modal-hidden'); modal.classList.add('modal-visible');
  modalBackdrop.classList.remove('opacity-0','pointer-events-none'); modalBackdrop.classList.add('opacity-100');
}
function closeModal(){
  modal.classList.remove('modal-visible'); modal.classList.add('modal-hidden');
  modalBackdrop.classList.add('opacity-0','pointer-events-none'); modalBackdrop.classList.remove('opacity-100');
  currentWishId = null;
}
closeModalBtn.addEventListener('click', closeModal);
closeModalTop.addEventListener('click', closeModal);
modalBackdrop.addEventListener('click', closeModal);
document.addEventListener('keydown', (e)=>{ if (e.key === 'Escape') closeModal(); });

// Click on jar circle
ballsGroup.addEventListener('click', (e)=>{
  const t = e.target;
  if (t && t.tagName === 'circle' && t.dataset.id) openModal(t.dataset.id);
});

// Grant -> go to pledge form
const donateWishBadge = document.getElementById('donateWishBadge');
grantBtn.addEventListener('click', ()=>{
  if (!currentWishId) return;
  const w = loadWishes().find(x=>x.id===currentWishId);
  donateWishBadge.textContent = `Granting: ${w.nickname}`;
  closeModal();
  routeTo('donate');
});

// Pledge form submission
const donorForm = document.getElementById('donorForm');
donorForm.addEventListener('submit', async (e) =>{
  e.preventDefault();
  const fd = new FormData(donorForm);
  const fullName = (fd.get('name')||'').trim();
  const nick = (fd.get('nickname')||'').trim();
  if (!fullName && !nick) { alert('Please enter either your Full Name or a Nickname.'); return; }
  const wishes = loadWishes();
  const target = wishes.find(x => `Granting: ${x.nickname}` === donateWishBadge.textContent) || wishes[0];

  const code = 'WISH-' + Math.floor(1000 + Math.random()*9000);
  const now = new Date().toISOString();
  const activeUser = localStorage.getItem(LS_ACTIVE_USER) || 'member';

  const donation = {
    code,
    wishId: target.id,
    wishNickname: target.nickname,
    donorUsername: activeUser,
    timestamp: now,
    donor: {
      displayName: fullName || nick || 'Anonymous',
      fullName, nickname: nick,
      email: fd.get('email'),
      phone: fd.get('phone') || '',
      type: fd.get('type'),
      amount: fd.get('amount') || '',
      timeline: fd.get('timeline') || '',
      message: fd.get('message') || ''
    },
    statusPhase: 0,
    pledgedAt: now,
    receivedAt: null,
    grantedAt: null
  };
  await saveDonation(donation);
  await setLatestCode(code);

  // Create a new thread for this pledge
  const msgs = loadMessages();
  await saveMessage(thread);

  donorForm.reset();
  alert('Pledge submitted! You can chat in Inbox. Admin will mark it as Granted when fulfilled.');
  routeTo('inbox');
  renderInbox();
  openThread(code);
});

// Cancel donate
document.getElementById('cancelDonate').addEventListener('click', ()=> routeTo('home'));

// Status lookup
document.getElementById('lookupBtn').addEventListener('click', ()=>{
  const code = (document.getElementById('lookupCode').value || '').trim();
  const d = loadDonations().find(x => x.code === code);
  const statusResult = document.getElementById('statusResult');
  statusResult.classList.remove('hidden');
  if (!code || !d) {
    statusResult.innerHTML = `<div class="text-white/90">No donation found for that code.</div>`;
    return;
  }
  const w = loadWishes().find(x => x.id === d.wishId);
  const phase = d.statusPhase ?? 0;
  const steps = [
    { label: 'Pledge given', date: d.pledgedAt, done: phase >= 0, icon: '📝' },
    { label: 'Donation received', date: d.receivedAt, done: phase >= 1, icon: '📦' },
    { label: 'Wish granted', date: d.grantedAt, done: phase >= 2, icon: '✨' },
  ];
  const items = steps.map((s,i) => `
    <div class="flex items-start gap-3">
      <div class="h-8 w-8 rounded-full ${s.done ? 'bg-green-400 text-green-900' : 'bg-white/20 text-white'} flex items-center justify-center font-semibold">${s.icon}</div>
      <div>
        <div class="font-semibold ${s.done ? '' : 'opacity-80'}">${s.label}${s.done ? ' • Completed' : ''}</div>
        <div class="text-xs opacity-80">${s.date ? new Date(s.date).toLocaleString() : (i===phase+1 ? 'In progress' : '')}</div>
      </div>
    </div>
  `).join('<div class="ml-3 h-6 border-l border-white/20"></div>');

  const ty = loadThanks()[d.code];
  const tyBlock = ty ? `
    <div class="rounded-2xl bg-white/10 border border-white/10 p-5">
      <div class="text-sm opacity-80 mb-1">A note from the student</div>
      <div>${ty.note ? ty.note.replace(/</g,'&lt;').replace(/>/g,'&gt;') : ''}</div>
      ${ty.image ? `<img src="${ty.image}" alt="Thank-you image" class="mt-3 rounded-xl max-h-64 object-cover" />` : ''}
      <div class="text-xs opacity-70 mt-2">Sent ${new Date(ty.time).toLocaleString()}</div>
    </div>
  ` : '';

  statusResult.innerHTML = `
    <div class="flex flex-col gap-5">
      <div class="flex items-center justify-between">
        <div>
          <div class="text-sm opacity-80">Donation Code</div>
          <div class="text-xl font-semibold">${d.code}</div>
        </div>
        <div class="text-sm">
          <span class="px-3 py-1 rounded-full ${phase === 2 ? 'bg-green-400 text-green-900' : phase === 1 ? 'bg-blue-300 text-blue-900' : 'bg-yellow-300 text-yellow-900'} font-semibold">
            ${phase === 2 ? 'Granted' : phase === 1 ? 'Received' : 'Pledged'}
          </span>
        </div>
      </div>
      <div class="rounded-xl bg-white/10 border border-white/10 p-5">
        <div class="grid gap-4">${items}</div>
      </div>
      ${tyBlock}
      <div class="rounded-xl bg-white/10 border border-white/10 p-5">
        <div class="text-sm opacity-80 mb-1">Student</div>
        <div class="font-semibold">${d.wishNickname}</div>
        <div class="text-sm opacity-80 mt-3">Wish</div>
        <div>${w?.wish || '-'}</div>
      </div>
    </div>
  `;
  refreshBallHighlights();
});

// Inbox rendering + thread open
async function renderInbox(){
  const msgs = await loadMessages();   // ✅ wait for Supabase
  const sorted = msgs.slice().reverse(); // ✅ now it's an array

  const list = document.getElementById('threadList');
  list.innerHTML = sorted.length ? '' : `<div class="p-4 text-white/80">No conversations yet.</div>`;
  sorted.forEach(m => {
    const el = document.createElement('div');
    el.className = 'px-4 py-3 hover:bg-white/5 cursor-pointer';
    el.innerHTML = `
      <div class="font-semibold">${m.title}</div>
      <div class="text-xs opacity-80">${new Date(m.createdAt).toLocaleString()}</div>`;
    el.addEventListener('click', ()=> openThread(m.threadId));
    list.appendChild(el);
  });
}

function openThread(threadId){
  const msgs = loadMessages();
  const t = msgs.find(x=>x.threadId===threadId);
  if(!t) return;
  document.getElementById('chatHeader').querySelector('.font-semibold').textContent = t.title;
  const messagesEl = document.getElementById('chatMessages');
  messagesEl.innerHTML = '';
  t.messages.forEach(m=>{
    const item = document.createElement('div');
    item.className = 'p-3 rounded-xl bg-white/10';
    item.innerHTML = `<div class="text-xs opacity-80">${m.from} • ${new Date(m.time).toLocaleString()}</div><div class="mt-1">${m.text}</div>`;
    messagesEl.appendChild(item);
  });
  // show input
  document.getElementById('chatForm').onsubmit = (e)=>{
    e.preventDefault();
    const txt = (document.getElementById('chatInput').value||'').trim();
    if(!txt) return;
    t.messages.push({ from: 'You', text: txt, time: new Date().toISOString() });
    saveMessages(loadMessages().map(x => x.threadId === t.threadId ? t : x));
    document.getElementById('chatInput').value = '';
    openThread(threadId);
  };
}

// Achievements (simple)

async function renderAchievements() {
  const topPledges = document.getElementById('topPledges');
  const topValue = document.getElementById('topValue');
  if (!topPledges || !topValue) return;

  topPledges.innerHTML = '';
  topValue.innerHTML = '';

  const ds = await loadDonations();   // ✅ wait for data
  const byPerson = {};

  ds.forEach(d => {
    const name = d.donor?.displayName || 'Anonymous';
    const value = parseFloat((d.donor?.amount || d.amount || '').toString().replace(/[^0-9.]/g,'')) || 0;

    if (!byPerson[name]) byPerson[name] = { name, count: 0, value: 0 };
    byPerson[name].count += 1;
    byPerson[name].value += value;
  });

  const rows = Object.values(byPerson);
  const pledgesSorted = rows.slice().sort((a,b) => b.count - a.count).slice(0,5);
  const valueSorted   = rows.slice().sort((a,b) => b.value - a.value).slice(0,5);

  pledgesSorted.forEach((r) => {
    const line = document.createElement('div');
    line.className = 'flex items-center justify-between rounded-xl bg-white/10 border border-white/10 p-3';
    line.innerHTML = `<div class="font-semibold">${r.name}</div><div class="text-sm opacity-90">${r.count} pledge(s)</div>`;
    topPledges.appendChild(line);
  });

  valueSorted.forEach((r) => {
    const line = document.createElement('div');
    line.className = 'flex items-center justify-between rounded-xl bg-white/10 border border-white/10 p-3';
    line.innerHTML = `<div class="font-semibold">${r.name}</div><div class="text-sm opacity-90">~RM${r.value.toFixed(2)}</div>`;
    topValue.appendChild(line);
  });
}


// Misc
async function refreshBallHighlights(){
  // highlight balls which have open pledges
  const latest = getLatestCode();
  const donations = await loadDonations();   // ✅ wait for array
  const donatedWishIds = donations.map(d => d.wishId);

  document.querySelectorAll('#ballsGroup circle[data-id]').forEach(c => {
    const id = c.dataset.id;
    if (donatedWishIds.includes(id)) {
      c.style.filter = 'drop-shadow(0 0 12px rgba(255,255,255,0.15))'; // ✅ SVG-friendly glow
    } else {
      c.style.filter = '';
    }
  });
}


// Profile modal
document.getElementById('profileBtn').addEventListener('click', ()=>{
  document.getElementById('profileModal').classList.remove('hidden');
  const user = localStorage.getItem(LS_ACTIVE_USER) || '-';
  document.getElementById('profUsername').textContent = user;
  document.getElementById('profRole').textContent = localStorage.getItem(LS_ROLE) || '-';
});
document.getElementById('closeProfile').addEventListener('click', ()=> document.getElementById('profileModal').classList.add('hidden'));

// Admin guard note: prevent admin.html access from donor (admin.html itself handles guard). This file just ensures donor pages behave.

// Initial render
renderJar();
renderInbox();
renderAchievements();

inbox-superbase.js-----
// js/inbox-supabase.js
// Supabase Inbox System (secure chat between donor and admin)
//
// Requires:
// - conversations table
// - messages table
// - RLS policies from instructions

import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

// ---------- CONFIG ----------
const SUPABASE_URL = "https://eaivuhgvzdvvxscqqqji.supabase.co"; // replace
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVhaXZ1aGd2emR2dnhzY3FxcWppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1OTMxNDIsImV4cCI6MjA3MTE2OTE0Mn0.ru1S0ZiYQluFFzYkrbFxqzk2v315xAA29iXlviy3Y1E";                          // replace
// ----------------------------

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

let activeConversation = null;
let user = null;

// Helpers
const $ = id => document.getElementById(id);
function showBanner(msg, color = "yellow") {
  const banner = $("inboxBanner");
  if (!banner) return;
  banner.textContent = msg;
  banner.classList.remove("hidden");
  banner.className = `mt-4 text-sm px-4 py-2 rounded-lg text-${color}-200 bg-${color}-500/20`;
}
function clearBanner() {
  const banner = $("inboxBanner");
  if (banner) banner.classList.add("hidden");
}

// Load user info
async function initUser() {
  const { data, error } = await supabase.auth.getUser();
  if (error || !data?.user) {
    showBanner("Not signed in. Please log in.", "red");
    return null;
  }
  user = data.user;
  $("inboxUserBadge").textContent = user.email || "User";
  return user;
}

// Load conversations for this user
async function loadConversations() {
  clearBanner();
  const { data, error } = await supabase
    .from("conversations")
    .select("id, created_at")
    .order("created_at", { ascending: false });

  if (error) {
    console.error(error);
    showBanner("Failed to load conversations", "red");
    return;
  }

  const threadList = $("threadList");
  threadList.innerHTML = "";

  if (!data.length) {
    threadList.innerHTML = `<div class="p-4 text-sm opacity-70">No conversations yet</div>`;
    return;
  }

  data.forEach(conv => {
    const btn = document.createElement("button");
    btn.className = "w-full text-left px-4 py-3 hover:bg-white/10";
    btn.textContent = `Conversation ${conv.id.slice(0, 6)}…`;
    btn.onclick = () => openConversation(conv.id);
    threadList.appendChild(btn);
  });
}

// Open a conversation and subscribe
async function openConversation(convId) {
  activeConversation = convId;
  $("chatHeader").querySelector("div").textContent = `Conversation ${convId.slice(0, 6)}`;
  $("chatMessages").innerHTML = "";

  const { data, error } = await supabase
    .from("messages")
    .select("id, sender_id, body, created_at")
    .eq("conversation_id", convId)
    .order("created_at");

  if (error) {
    console.error(error);
    showBanner("Failed to load messages", "red");
    return;
  }
  renderMessages(data);

  // Subscribe for realtime updates
  supabase
    .channel("chat-" + convId)
    .on("postgres_changes", {
      event: "INSERT",
      schema: "public",
      table: "messages",
      filter: `conversation_id=eq.${convId}`
    }, payload => {
      renderMessages([...(data || []), payload.new]);
    })
    .subscribe();
}

// Render messages
function renderMessages(msgs) {
  const container = $("chatMessages");
  container.innerHTML = "";
  msgs.forEach(m => {
    const div = document.createElement("div");
    const isSelf = m.sender_id === user.id;
    div.className = `p-3 rounded-lg max-w-[75%] ${isSelf ? "bg-indigo-600 text-white ml-auto" : "bg-white text-slate-900"}`;
    div.textContent = m.body;
    container.appendChild(div);
  });
  container.scrollTop = container.scrollHeight;
}

// Handle sending
$("chatForm").addEventListener("submit", async e => {
  e.preventDefault();
  if (!activeConversation) {
    showBanner("Select a conversation first.", "yellow");
    return;
  }
  const input = $("chatInput");
  const text = input.value.trim();
  if (!text) return;

  const { error } = await supabase.from("messages").insert([
    {
      conversation_id: activeConversation,
      sender_id: user.id,
      body: text
    }
  ]);
  if (error) {
    console.error(error);
    showBanner("Message failed to send", "red");
  }
  input.value = "";
});

// Init
(async function(){
  const u = await initUser();
  if (u) loadConversations();
})();

login-superbase.js------
/ js/login-supabase.js
// Plug-and-play Supabase login integration with pending-profile handling.
// - Uses email + password sign-in via Supabase
// - After sign-in, attempts to move a locally-stored pending profile (wishjar_pending_profile)
//   into the 'profiles' table as id = auth user id (so it satisfies RLS).
// - Stores a small local session (LS_ROLE, LS_ACTIVE_USER) and routes admin -> admin.html else donor.html
//
// IMPORTANT: update SUPABASE_URL and SUPABASE_ANON_KEY below.

import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

console.log('✅ login-supabase.js loaded');

// ---------- EDIT THESE ----------
const SUPABASE_URL = 'https://eaivuhgvzdvvxscqqqji.supabase.co';         // <- replace if needed
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVhaXZ1aGd2emR2dnhzY3FxcWppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1OTMxNDIsImV4cCI6MjA3MTE2OTE0Mn0.ru1S0ZiYQluFFzYkrbFxqzk2v315xAA29iXlviy3Y1E';                      // <- replace if needed
// Add emails that should be considered "admin" accounts (lowercase is recommended)
const ADMIN_EMAILS = ['christianoben294@gmail.com'];                     // <- replace with your admin email(s)
// -------------------------------

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// localStorage keys (keeps parity with your old demo)
const LS_ROLE = 'wishjar_role';
const LS_ACTIVE_USER = 'wishjar_active_user';
const PENDING_KEY = 'wishjar_pending_profile';

// helpers
const $ = id => document.getElementById(id);
const show = (id, text) => { const e = $(id); if(!e) return; e.classList.remove('hidden'); if (text) e.textContent = text; };
const hide = id => { const e = $(id); if(!e) return; e.classList.add('hidden'); };
const setLS = (k,v) => { try { localStorage.setItem(k, v); } catch(e){} };

// Show pending banner if pending profile exists (small UX)
document.addEventListener('DOMContentLoaded', () => {
  try {
    const raw = localStorage.getItem(PENDING_KEY);
    if (!raw) return;
    const pending = JSON.parse(raw);
    const banner = $('pendingBanner');
    const txt = $('pendingBannerText');
    const clearBtn = $('clearPendingBtn');
    if (banner && txt && clearBtn) {
      const emailText = pending?.email ? `Pending registration for ${pending.email}.` : 'You have a pending registration.';
      txt.textContent = `${emailText} Please confirm your email, then sign in to finish creating your profile.`;
      banner.classList.remove('hidden');
      clearBtn.addEventListener('click', () => {
        localStorage.removeItem(PENDING_KEY);
        banner.classList.add('hidden');
      });
    }
  } catch(e) {
    console.error('Pending banner error', e);
  }
});

// Helper: get profile by user id
async function fetchProfileById(uid){
  const { data, error } = await supabase.from('profiles').select('*').eq('id', uid).limit(1).single();
  if (error) {
    // if RLS prevents select, data will be null and error present
    console.warn('fetchProfileById error', error);
    return null;
  }
  return data;
}

/**
 * tryInsertPendingProfile(user)
 * - user: Supabase user object returned after sign-in (contains .id and .email)
 *
 * Behavior:
 * - reads pending profile from localStorage (key 'wishjar_pending_profile')
 * - verifies pending.email matches the signed-in user's email (best-effort check)
 * - inserts profile row with id = user.id
 * - on success: removes pending from localStorage
 * - on RLS / other failure: keeps pending and returns a reason so caller can act
 */
async function tryInsertPendingProfile(user) {
  if (!user || !user.id) return null;

  try {
    const raw = localStorage.getItem(PENDING_KEY);
    if (!raw) return null; // nothing to do

    const pending = JSON.parse(raw);
    if (!pending || !pending.email) return null;

    // Safety check: ensure the pending email matches the signed-in user's email
    const signedInEmail = (user.email || '').toLowerCase();
    const pendingEmail = (pending.email || '').toLowerCase();

    if (signedInEmail && pendingEmail && signedInEmail !== pendingEmail) {
      console.warn('Pending profile email does not match signed-in user email; skipping auto-insert.');
      return { ok: false, reason: 'email_mismatch' };
    }

    // Build insert payload and run the insert (id = user.id to satisfy RLS policy)
    const payload = {
      id: user.id,
      username: pending.username,
      full_name: pending.fullName,
      hide_full_name: !!pending.hideFullName,
      phone: pending.phone,
      affiliation: pending.affiliation
    };

    const { data, error } = await supabase
      .from('profiles')
      .insert([payload], { returning: 'minimal' });

    if (error) {
      console.error('Error inserting pending profile:', error);

      // Normalize error detection
      const code = error?.code || error?.status || null;
      const msg = (error?.message || '').toString();

      // RLS blocked it (shouldn't happen if user is signed in and id matches), keep pending
      if (code === '42501' || /row[-\s]?level security/i.test(msg) || /violates row-level security/i.test(msg)) {
        console.warn('Insert blocked by RLS. Pending profile retained.');
        return { ok: false, reason: 'rls', error };
      }

      // Unique constraint / duplicate (Postgres: 23505) — username or email conflict
      if (error?.code === '23505' || /unique/i.test(msg) || /duplicate/i.test(msg)) {
        console.warn('Unique constraint conflict for pending profile.', msg);
        return { ok: false, reason: 'unique', error };
      }

      // Other error: keep pending and return
      return { ok: false, reason: 'other', error };
    }

    // Success: remove pending localStorage and return success
    try { localStorage.removeItem(PENDING_KEY); } catch(e){ console.warn('Could not remove pending profile from localStorage', e); }
    console.log('Pending profile inserted successfully for user', user.id);
    return { ok: true };
  } catch (err) {
    console.error('Unexpected error in tryInsertPendingProfile:', err);
    return { ok: false, reason: 'exception', error: err };
  }
}

// Main login handler
const form = $('loginForm');
if (!form) {
  console.error('loginForm not found. Make sure login-supabase.js is loaded after the form and the script tag uses type="module".');
} else {
  form.addEventListener('submit', async (ev) => {
    ev.preventDefault();
    hide('loginApiError'); hide('emailError'); hide('passwordError');

    const email = ($('email').value || '').trim();
    const password = ($('password').value || '').trim();
    if (!email || !/^\S+@\S+\.\S+$/.test(email)) { show('emailError'); return; }
    if (!password) { show('passwordError'); return; }

    const btn = $('signinBtn');
    const orig = btn.textContent;
    btn.disabled = true;
    btn.textContent = 'Signing in...';

    try {
      // sign in via Supabase v2 method
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });

      if (error) {
        console.error('Sign in error', error);
        const msg = (error?.message || '').toString();
        if (msg.toLowerCase().includes('invalid') || msg.toLowerCase().includes('password')) {
          show('loginApiError', 'Invalid email or password.');
        } else if (msg.toLowerCase().includes('email')) {
          show('loginApiError', msg);
        } else {
          show('loginApiError', 'Sign-in failed. Try again.');
        }
        btn.disabled = false;
        btn.textContent = orig;
        return;
      }

      // Success: data.session and data.user exist
      const user = data?.user ?? null;
      if (!user) {
        // Rare: no user returned; redirect back
        show('loginApiError', 'Sign-in succeeded but user info is missing. Try again.');
        btn.disabled = false;
        btn.textContent = orig;
        return;
      }

      // Try to apply any pending profile BEFORE we fetch the profile (so profile will exist)
      try {
        const pendingResult = await tryInsertPendingProfile(user);
        if (pendingResult) {
          if (pendingResult.ok) {
            console.log('Pending profile applied automatically.');
          } else {
            // Optionally handle specific reasons - we don't block login on failures
            if (pendingResult.reason === 'email_mismatch') {
              console.warn('Pending profile email mismatch; pending profile left in localStorage.');
            } else if (pendingResult.reason === 'unique') {
              console.warn('Pending profile has unique constraint conflict. Admin action may be required.');
            } else if (pendingResult.reason === 'rls') {
              console.warn('Pending profile insertion blocked by RLS. Will retry on next sign-in or via onAuthStateChange.');
            } else {
              console.warn('Pending profile not applied:', pendingResult);
            }
          }
        }
      } catch (e) {
        console.error('Error while attempting to insert pending profile after sign-in', e);
      }

      // Try to fetch profile row by auth user id (may exist now if pending applied)
      const profile = await fetchProfileById(user.id);

      // Determine role:
      // - If user email is in ADMIN_EMAILS => admin
      // - Else fallback to affiliation in profile if available
      // - Else 'user'
      let role = 'user';
      const lowEmail = (user.email || '').toLowerCase();
      const adminSet = new Set(ADMIN_EMAILS.map(e => (e || '').toLowerCase()));
      if (adminSet.has(lowEmail)) role = 'admin';
      else if (profile?.affiliation) {
        const aff = (profile.affiliation || '').toLowerCase();
        if (aff.includes('admin') || aff.includes('staff')) role = 'admin';
        else role = 'user';
      }

      // Save to localStorage (keeps compatibility with earlier code)
      setLS(LS_ROLE, role);
      setLS(LS_ACTIVE_USER, profile?.username || user.email || user.id);

      // Redirect
      if (role === 'admin') window.location.href = 'admin.html';
      else window.location.href = 'donor.html';
    } catch (err) {
      console.error('Unexpected login error', err);
      show('loginApiError', 'Unexpected error — try again later.');
      btn.disabled = false;
      btn.textContent = orig;
    }
  });
}

package.json-----

  "name": "wishjar-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "better-sqlite3": "^8.4.0",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.0",
    "express": "^4.18.2",
    "helmet": "^6.0.0",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}

register-superbase.js----
// js/register-supabase.js
// Frontend registration using Supabase Auth + profiles table.
// Handles three cases:
//  - signUp returns error -> show friendly message (handles "User already registered")
//  - signUp returns data.user -> immediate account (no email confirm): insert profile now
//  - signUp returns no user (email confirmation required): save pending profile & prompt user to confirm
//
// IMPORTANT: replace SUPABASE_URL and SUPABASE_ANON_KEY with your project values.

import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

console.log("✅ register-supabase.js loaded");

// ---------- EDIT THESE to your Supabase project ----------
const SUPABASE_URL = 'https://eaivuhgvzdvvxscqqqji.supabase.co';     // <- replace
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVhaXZ1aGd2emR2dnhzY3FxcWppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1OTMxNDIsImV4cCI6MjA3MTE2OTE0Mn0.ru1S0ZiYQluFFzYkrbFxqzk2v315xAA29iXlviy3Y1E';             // <- replace
// -------------------------------------------------------

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// Utility helpers
const $ = id => document.getElementById(id);
const show = (id, text) => { const e = $(id); if(!e) return; e.classList.remove('hidden'); if (text) e.textContent = text; };
const hide = id => { const e = $(id); if(!e) return; e.classList.add('hidden'); };

// Pending-profile storage key (used when e-mail confirmation is required)
const PENDING_PROFILE_KEY = 'wishjar_pending_profile';

// validate inputs client-side
function validate(values){
  let ok = true;
  hide('fullnameError'); hide('usernameError'); hide('emailError'); hide('phoneError');
  hide('affiliationError'); hide('passwordError'); hide('confirmError'); hide('apiError');

  if (!values.fullName) { show('fullnameError'); ok = false; }
  if (!values.username) { show('usernameError', 'Username is required.'); ok = false; }
  if (!values.email || !/^\S+@\S+\.\S+$/.test(values.email)) { show('emailError'); ok = false; }
  if (!values.phone) { show('phoneError'); ok = false; }
  if (!values.affiliation) { show('affiliationError'); ok = false; }
  if (!values.password || values.password.length < 8) { show('passwordError'); ok = false; }
  if (values.password !== values.confirmPassword) { show('confirmError'); ok = false; }
  return ok;
}

// check username exists in profiles table (returns true if taken)
async function isUsernameTaken(username){
  const { data, error } = await supabase
    .from('profiles')
    .select('username')
    .eq('username', username)
    .limit(1);

  if (error) {
    console.error('Username check error', error);
    throw new Error('Could not validate username availability.');
  }

  return (Array.isArray(data) && data.length > 0);
}

// Insert profile row. Expects userId (uuid).
async function insertProfile(userId, { username, fullName, hideFullName, phone, affiliation }){
  const { data, error } = await supabase
    .from('profiles')
    .insert([{
      id: userId,
      username,
      full_name: fullName,
      hide_full_name: !!hideFullName,
      phone,
      affiliation
    }], { returning: 'minimal' });

  if (error) {
    console.error('Profile insert error', error);
    throw error;
  }
  return true;
}

// If the user signs in (after confirming email), create pending profile if present
supabase.auth.onAuthStateChange(async (event, session) => {
  if (event === 'SIGNED_IN' && session?.user) {
    try {
      const pendingRaw = localStorage.getItem(PENDING_PROFILE_KEY);
      if (!pendingRaw) return;
      const pending = JSON.parse(pendingRaw);
      if (!pending || !pending.email) return;

      // Only insert if profile not already present
      const uid = session.user.id;
      const { data: existing, error: existErr } = await supabase.from('profiles').select('id').eq('id', uid).limit(1);
      if (existErr) {
        console.error('Error checking existing profile after sign-in', existErr);
        // don't remove pending - try again later or admin can inspect
        return;
      }
      if (existing && existing.length) {
        localStorage.removeItem(PENDING_PROFILE_KEY);
        return;
      }

      // Insert profile now that we have an auth user id
      try {
        await insertProfile(uid, pending);
        localStorage.removeItem(PENDING_PROFILE_KEY);
        console.log('Inserted pending profile after sign-in.');
      } catch (err) {
        // Normalize error info
        console.error('Error inserting pending profile after sign-in', err);
        const code = err?.code || err?.status || null;
        const msg = (err && err.message) ? err.message.toString() : String(err);
        const isRls = (code === '42501') || /row[-\s]?level security/i.test(msg) || /violates row-level security/i.test(msg);

        if (isRls) {
          // This is the RLS insert failure: keep pending so we can retry later and inform the user via console
          console.warn('Pending profile insertion blocked by RLS. Will keep pending profile for retry after next sign-in.');
          // Optionally notify the user in-app (do not spam)
          // show('apiError', 'Your profile could not be created yet. Please contact support if this persists.');
          return;
        }

        // other errors: surface message for admin/debug
        // You may choose to show a UI error, but avoid leaking internals to users
        show('apiError', msg || 'Could not save profile after sign-in.');
        return;
      }
    } catch (err) {
      console.error('Unexpected error in onAuthStateChange handler', err);
    }
  }
});


// Main form handler
const formEl = $('registerForm');
if (!formEl) {
  console.error('registerForm not found in the DOM. Make sure the script tag is placed after the form or use defer.');
} else {
  formEl.addEventListener('submit', async (ev) => {
    ev.preventDefault();

    const fullName = $('fullname').value.trim();
    const hideFullName = !!$('hideFullName').checked;
    const username = $('username').value.trim();
    const email = $('email').value.trim();
    const phone = $('phone').value.trim();
    const affiliation = $('affiliation').value;
    const password = $('password').value;
    const confirmPassword = $('confirmPassword').value;

    const values = { fullName, username, email, phone, affiliation, password, confirmPassword };

    if (!validate(values)) return;

    // Confirm 18+
    if (!confirm('By continuing you confirm you are 18 years old or older. Proceed?')) return;

    // Disable the button
    const btn = $('submitRegister');
    btn.disabled = true;
    const origText = btn.textContent;
    btn.textContent = 'Creating account...';

    try {
      // Check username availability first (helps avoid creating auth user with taken username)
      const taken = await isUsernameTaken(username);
      if (taken) {
        show('usernameError', 'Username already taken.');
        btn.disabled = false;
        btn.textContent = origText;
        return;
      }

      // Create Auth user in Supabase
      // NOTE: use the v2 style signUp call (object + options)
      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: { data: { username } }
      });

      if (signUpError) {
        console.error('SignUp error', signUpError);

        // Handle common/known errors more nicely:
        const msg = (signUpError?.message || '').toString();

        if (msg.toLowerCase().includes('already') || msg.toLowerCase().includes('registered')) {
          // User already exists -> suggest login or reset
          show('apiError', 'Email already registered. Try signing in or use password reset.');
          // optionally redirect to login after small delay
          setTimeout(()=> { window.location.href = 'index.html'; }, 1800);
          return;
        }

        // Generic error
        show('apiError', signUpError.message || 'Unable to create account.');
        btn.disabled = false;
        btn.textContent = origText;
        return;
      }

      // No error from signUp. Two possible states:
      // 1) signUpData.user exists => an immediate session created (no email confirm required)
      // 2) signUpData.user is null => email confirmation required (or other flow); we must wait
      const createdUser = signUpData?.user ?? null;

      if (createdUser && createdUser.id) {
  // Case 1: Insert profile immediately (but handle RLS failures gracefully)
  try {
    await insertProfile(createdUser.id, { username, fullName, hideFullName, phone, affiliation });
    alert('Registration successful. You may now sign in.');
    window.location.href = 'index.html';
    return;
  } catch (err) {
    // err may be a Supabase error object or a thrown Error
    console.error('Profile insert after immediate signup failed', err);

    // Normalize error message/code
    const code = err?.code || err?.status || null;
    const msg = (err && err.message) ? err.message.toString() : String(err);

    // Detect RLS/Postgres permission error (code 42501) or message mentioning row-level security
    const isRls = (code === '42501') || /row[-\s]?level security/i.test(msg) || /violates row-level security/i.test(msg);

    if (isRls) {
      // Fall back to Option A: save pending profile locally and ask user to confirm email/sign in.
      const pending = { email, username, fullName, hideFullName, phone, affiliation };
      try { localStorage.setItem(PENDING_PROFILE_KEY, JSON.stringify(pending)); } catch(e){ console.warn('Could not save pending profile locally', e); }

      alert('Account created — please check your email and confirm your address. After confirming, sign in and we will finish creating your profile.');
      window.location.href = 'index.html';
      return;
    }

    // Other errors: show friendly message
    show('apiError', msg || 'Profile save failed. Contact admin.');
    btn.disabled = false;
    btn.textContent = origText;
    return;
  }
}


      // Case 2: Email confirmation required (or no immediate user returned)
      // Save pending profile in localStorage and instruct user to confirm email
      const pending = { email, username, fullName, hideFullName, phone, affiliation };
      localStorage.setItem(PENDING_PROFILE_KEY, JSON.stringify(pending));

      // Friendly alert and redirect to login page
      alert('Registration started. Please check your email and confirm your address. After confirming, sign in and your profile will be created automatically.');
      window.location.href = 'index.html';
      return;

    } catch (err) {
      console.error('Unexpected error', err);
      show('apiError', err.message || 'Unexpected error');
    } finally {
      btn.disabled = false;
      btn.textContent = origText;
    }
  });
}

register.js-------
// js/register-supabase.js
// Frontend registration using Supabase Auth + profiles table.
// - Validates the form
// - Checks username availability (via profiles table)
// - Signs up user via supabase.auth.signUp
// - Inserts profile row (id = auth.user.id) if signup returns an immediate user
// - If email confirmation is enabled (no immediate user), stores a pending profile in localStorage.
// - When the user later signs in (after email confirmation), the onAuthStateChange handler will attempt to insert the pending profile.
//
// IMPORTANT:
// 1) Replace SUPABASE_URL and SUPABASE_ANON_KEY with values from your Supabase project (Settings → API).
// 2) Run the SQL provided (below) to create 'profiles' and RLS policies.
// 3) For privacy: review the RLS policies suggested in the SQL section.

import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

console.log("✅ register-supabase.js loa22ded");

// ---------- EDIT THESE to your Supabase project ----------
const SUPABASE_URL = 'https://eaivuhgvzdvvxscqqqji.supabase.co';     // <- replace
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVhaXZ1aGd2emR2dnhzY3FxcWppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1OTMxNDIsImV4cCI6MjA3MTE2OTE0Mn0.ru1S0ZiYQluFFzYkrbFxqzk2v315xAA29iXlviy3Y1E';             // <- replace
// -------------------------------------------------------

console.log("✅ register-supabase.js loaded");

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// Utility helpers
const $ = id => document.getElementById(id);
const show = (id, text) => { const e = $(id); if(!e) return; e.classList.remove('hidden'); if (text) e.textContent = text; };
const hide = id => { const e = $(id); if(!e) return; e.classList.add('hidden'); };

// Pending-profile storage key (used when e-mail confirmation is required)
const PENDING_PROFILE_KEY = 'wishjar_pending_profile';

// validate inputs client-side
function validate(values){
  let ok = true;
  hide('fullnameError'); hide('usernameError'); hide('emailError'); hide('phoneError');
  hide('affiliationError'); hide('passwordError'); hide('confirmError'); hide('apiError');

  if (!values.fullName) { show('fullnameError'); ok = false; }
  if (!values.username) { show('usernameError', 'Username is required.'); ok = false; }
  if (!values.email || !/^\S+@\S+\.\S+$/.test(values.email)) { show('emailError'); ok = false; }
  if (!values.phone) { show('phoneError'); ok = false; }
  if (!values.affiliation) { show('affiliationError'); ok = false; }
  if (!values.password || values.password.length < 8) { show('passwordError'); ok = false; }
  if (values.password !== values.confirmPassword) { show('confirmError'); ok = false; }
  return ok;
}

// check username exists in profiles table (returns true if taken)
async function isUsernameTaken(username){
  // Note: this requires public read/select on profiles (see SQL/RLS instructions).
  const { data, error } = await supabase
    .from('profiles')
    .select('id')
    .eq('username', username)
    .limit(1);

  if (error) {
    console.error('Username check error', error);
    // If you don't want to allow public reads in production, consider creating an RPC or server endpoint.
    throw new Error('Could not validate username availability.');
  }
  return (Array.isArray(data) && data.length > 0);
}

// Insert profile row. Expects userId (uuid).
async function insertProfile(userId, { username, fullName, hideFullName, phone, affiliation }){
  const { data, error } = await supabase
    .from('profiles')
    .insert([{
      id: userId,
      username,
      full_name: fullName,
      hide_full_name: !!hideFullName,
      phone,
      affiliation
    }], { returning: 'minimal' }); // we don't need the inserted row returned

  if (error) {
    console.error('Profile insert error', error);
    throw error;
  }
  return true;
}

// If the user signs in (after confirming email), create pending profile if present
supabase.auth.onAuthStateChange(async (event, session) => {
  // event examples: 'SIGNED_IN', 'SIGNED_OUT', 'PASSWORD_RECOVERY', ...
  if (event === 'SIGNED_IN' && session?.user) {
    try {
      const pendingRaw = localStorage.getItem(PENDING_PROFILE_KEY);
      if (!pendingRaw) return;
      const pending = JSON.parse(pendingRaw);
      if (!pending || !pending.email) return;

      // Only insert if profile not already present
      const uid = session.user.id;
      const { data: existing } = await supabase.from('profiles').select('id').eq('id', uid).limit(1);
      if (existing && existing.length) {
        localStorage.removeItem(PENDING_PROFILE_KEY);
        return;
      }

      // Insert profile now that we have an auth user id
      await insertProfile(uid, pending);
      localStorage.removeItem(PENDING_PROFILE_KEY);
      console.log('Inserted pending profile after sign-in.');
    } catch (err) {
      console.error('Error inserting pending profile after sign-in', err);
    }
  }
});

// Main form handler
$('registerForm').addEventListener('submit', async (ev) => {
  ev.preventDefault();

  const fullName = $('fullname').value.trim();
  const hideFullName = !!$('hideFullName').checked;
  const username = $('username').value.trim();
  const email = $('email').value.trim();
  const phone = $('phone').value.trim();
  const affiliation = $('affiliation').value;
  const password = $('password').value;
  const confirmPassword = $('confirmPassword').value;

  const values = { fullName, username, email, phone, affiliation, password, confirmPassword };

  if (!validate(values)) return;

  // Confirm 18+
  if (!confirm('By continuing you confirm you are 18 years old or older. Proceed?')) return;

  // Disable the button
  const btn = $('submitRegister');
  btn.disabled = true;
  const origText = btn.textContent;
  btn.textContent = 'Creating account...';

  try {
    // Check username availability first (helps avoid creating auth user with taken username)
    const taken = await isUsernameTaken(username);
    if (taken) {
      show('usernameError', 'Username already taken.');
      btn.disabled = false;
      btn.textContent = origText;
      return;
    }

    // Create Auth user in Supabase
    // NOTE: metadata can include public fields; don't put secrets here.
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp(
      { email, password },
      { data: { username } } // optional metadata
    );

    if (signUpError) {
      console.error('SignUp error', signUpError);
      show('apiError', signUpError.message || 'Unable to create account.');
      btn.disabled = false;
      btn.textContent = origText;
      return;
    }

    // If signUpData.user exists immediately (no e-mail confirmation required),
    // we can insert the profile right away.
    const createdUser = signUpData?.user ?? null;
    if (createdUser && createdUser.id) {
      try {
        await insertProfile(createdUser.id, { username, fullName, hideFullName, phone, affiliation });
        alert('Registration successful. You may now sign in.');
        window.location.href = 'index.html';
        return;
      } catch (err) {
        // If profile insertion fails but auth exists, show message. Cleaning up the auth user
        // requires the service_role key (we avoid that on client). You can manually remove user
        // from Supabase dashboard if needed.
        show('apiError', err.message || 'Profile save failed. Contact admin.');
        btn.disabled = false;
        btn.textContent = origText;
        return;
      }
    }

    // If we reach here, signUp did not return a user (likely because email confirmation is required).
    // Save a pending profile in localStorage and prompt the user to confirm email.
    const pending = { email, username, fullName, hideFullName, phone, affiliation };
    localStorage.setItem(PENDING_PROFILE_KEY, JSON.stringify(pending));

    alert('Registration initiated. Please check your email and confirm your address. After confirming, sign in and your profile will be created automatically.');
    window.location.href = 'index.html';
  } catch (err) {
    console.error('Unexpected error', err);
    show('apiError', err.message || 'Unexpected error');
  } finally {
    btn.disabled = false;
    btn.textContent = origText;
  }
});

server.js------
{
  "name": "wishjar-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "better-sqlite3": "^8.4.0",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.0",
    "express": "^4.18.2",
    "helmet": "^6.0.0",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}

supabase.js-------
// js/supabase.js
import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

const SUPABASE_URL      = 'https://eaivuhgvzdvvxscqqqji.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVhaXZ1aGd2emR2dnhzY3FxcWppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1OTMxNDIsImV4cCI6MjA3MTE2OTE0Mn0.ru1S0ZiYQluFFzYkrbFxqzk2v315xAA29iXlviy3Y1E'  // your anon key

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);



